plugins {
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.5.30-RC'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.5.30-RC'
    id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'org.beryx.runtime' version '1.12.3'
}
group 'com.hcyacg'
version '1.0'

repositories {
//    mavenLocal()

//    maven {
//        url = "https://maven.aliyun.com/repository/central"
//    }
//    maven {
//        url = "https://www.ebi.ac.uk/intact/maven/nexus/content/repositories/public/"
//    }
    maven {
        url = uri("https://plugins.gradle.org/m2/")
    }
    mavenCentral()
    flatDir { dirs("libs") }

}

javafx {
    modules = ['javafx.controls', 'javafx.fxml','javafx.graphics','javafx.base','javafx.swing']
}

application {
    mainClassName = "com.hcyacg.miraipc.Launcher"
    applicationName = "miraipc"
}

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

// Uncomment and adjust the code below if you want to generate images for multiple platforms.
// (You need to also uncomment the line 'targetPlatformName = ...' in the jpackage block.)
/*
    targetPlatform("lin") {
        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jdk_x64_linux_hotspot_15.0.2_7.tar.gz")
    }

    targetPlatform("mac") {
        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jdk_x64_mac_hotspot_15.0.2_7.tar.gz") {
            downloadDir = "$buildDir/myMac"
            archiveName = "my-mac-jdk"
            archiveExtension = "tar.gz"
            pathToHome = "jdk-15.0.2+7/Contents/Home"
            overwrite = true
        }
    }

    targetPlatform("win") {
        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jdk_x64_windows_hotspot_15.0.2_7.zip")
    }
*/

    launcher {
        noConsole = true
    }
    jpackage {
        // Uncomment and adjust the following line if your runtime task is configured to generate images for multiple platforms
        // targetPlatformName = "mac"

        def currentOs = org.gradle.internal.os.OperatingSystem.current()
        def imgType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
        imageOptions += ['--icon', "src/main/resources/mirai.$imgType"]
        installerOptions += ['--resource-dir', "src/main/resources"]
        installerOptions += ['--vendor', 'Acme Corporation']

        if (currentOs.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        } else if (currentOs.linux) {
            installerOptions += ['--linux-package-name', 'miraipc', '--linux-shortcut']
        } else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', 'miraipc']
        }
    }
}

dependencies {
    implementation('org.yaml:snakeyaml:1.30')
    implementation('org.apache.logging.log4j:log4j-core:2.17.2')
    implementation('com.alibaba:fastjson:2.0.1')
    implementation('cn.hutool:hutool-all:5.7.22')
    implementation("com.gluonhq:charm-glisten:6.0.7-API-CHANGE-RELEASE-JUNE-2021")
    implementation('com.gluonhq.attach:util:4.0.14')
    implementation("commons-io:commons-io:2.11.0")
    implementation('io.github.palexdev:materialfx:11.13.5')

    implementation('org.controlsfx:controlsfx:11.1.1')
    implementation('com.dlsc.formsfx:formsfx-core:11.5.0')
    implementation('com.jfoenix:jfoenix:9.0.10')
    implementation('net.synedra:validatorfx:0.3.1')
            { exclude(group: 'org.openjfx') }
    implementation('org.kordamp.ikonli:ikonli-javafx:12.3.1')
    implementation('org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0')
//    implementation("eu.hansolo:tilesfx:17.1.1")
    implementation("org.apache.commons:commons-lang3:3.12.0")
    implementation("net.mamoe:mirai-console:2.11.0-M2.2")




    var miraiVersion = '2.11.0-M2.2'
    api("net.mamoe:mirai-core-api:${miraiVersion}")     // 编译代码使用
//    implementation("net.mamoe.mirai-console:${miraiVersion}")
    runtimeOnly("net.mamoe:mirai-console:${miraiVersion}")
    runtimeOnly("net.mamoe:mirai-core:${miraiVersion}") // 运行时使用
}